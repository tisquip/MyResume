@using Resume.Grpc
@using Resume.Application.ViewModels
@using Resume.Domain

@implements IDisposable

@if (isLoading)
{
    <div class="text-center">
        <LoaderComponent />
    </div>
}

@if (!previousGames?.Any() ?? true)
{
    <p class="small text-white"><em>No Previous Games Played yet</em></p>
}
else
{


    for (int i = 0; i < previousGames.Count; i++)
    {
        <Resume.Web.Components.DisplayComponents.DisplayLiveMatchViewModelDisplayComponent Options="new DisplayComponents.DisplayLiveMatchViewModelDisplayComponentOptions(previousGames[i])" />
        if (i != previousGames.Count - 1)
        {
            <hr style="background-color: white;color: white" />
        }
    }
}

@code {
    List<LiveMatchViewModel> previousGames = new List<LiveMatchViewModel>();
    bool isLoading = true;

    SignalRService signalRService;
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        signalRService = await SignalRService.GetSignalRService();
        signalRService.OnLiveMatchView -= OnLiveMatchViewModelRecieved;
        signalRService.OnLiveMatchView += OnLiveMatchViewModelRecieved;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if (firstRender)
        {
            _ = GetPreviousGames();
        }
    }

    async Task GetPreviousGames()
    {
        isLoading = true;
        await InvokeAsync(StateHasChanged);

        try
        {
            var gamesFromServer = await GrpcClientServices.GetGames(Variables.ArsenalTeamId) ?? new List<LiveMatchViewModel>();

            if (gamesFromServer.Any())
            {
                gamesFromServer = gamesFromServer.Where(pg => pg.MatchStatus == MatchStatus.FullTime.ToString()).OrderByDescending(p => p.StartTime).ToList();
                if (gamesFromServer.Any())
                {
                    for (int i = 0; i < gamesFromServer.Count; i++)
                    {
                        if (i == 2)
                            break;
                        previousGames.Add(gamesFromServer[i]);
                    }
                }
            }
        }
        catch (Exception)
        {
            //TODO: Implement
        }

        isLoading = false;
        await InvokeAsync(StateHasChanged);
    }

    async void OnLiveMatchViewModelRecieved(object sender, LiveMatchViewModel liveMatchViewModel)
    {
        if (liveMatchViewModel.MatchStatus == Resume.Domain.MatchStatus.FullTime.ToString())
        {
            var liveMatchViewModelFromList = previousGames.FirstOrDefault(m => m.MatchId == liveMatchViewModel.MatchId);
            if (liveMatchViewModelFromList != null)
            {
                await InvokeAsync(() =>
                {
                    isLoading = true;
                    StateHasChanged();
                });
                await GetPreviousGames();
            }
        }
    }

    public void Dispose()
    {
        if (signalRService != null)
        {
            signalRService.OnLiveMatchView -= OnLiveMatchViewModelRecieved;
        }
    }

}
