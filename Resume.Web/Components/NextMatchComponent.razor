@using Resume.Grpc
@using Resume.Application.ViewModels
@using Resume.Domain

@implements IDisposable

@if (isLoading)
{
    <div class="text-center">
        <LoaderComponent />
    </div>
}
else
{
    if (nextMatch == null)
    {
        <p class="small text-white"><em>No Next Match Scheduled</em></p>
    }
    else
    {
        <p class="small text-white mb-0">Total minutes left till next kickoff: @timeLeft</p>
        <Resume.Web.Components.DisplayComponents.DisplayLiveMatchViewModelDisplayComponent Options="new DisplayComponents.DisplayLiveMatchViewModelDisplayComponentOptions(nextMatch)" />
    }
}



@code {
    LiveMatchViewModel nextMatch;
    bool isLoading = true;
    string timeLeft;
    System.Threading.Timer timer;

    SignalRService signalRService;
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        signalRService = await SignalRService.GetSignalRService();
        signalRService.OnLiveMatchView -= OnLiveMatchViewModelRecieved;
        signalRService.OnLiveMatchView += OnLiveMatchViewModelRecieved;

        timer = new System.Threading.Timer(OnTimerElapsed, null, TimeSpan.FromSeconds(2), TimeSpan.FromSeconds(1));
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if (firstRender)
        {
            _ = GetNextGame();
        }
    }

    async Task GetNextGame()
    {
        isLoading = true;
        await InvokeAsync(StateHasChanged);

        var gamesFromServer = await GrpcClientServices.GetGames(Variables.ArsenalTeamId) ?? new List<LiveMatchViewModel>();

        if (gamesFromServer.Any())
        {
            var gamesFromServerThatAreNotStarted = gamesFromServer.Where(pg => pg.MatchStatus == MatchStatus.NotStarted.ToString()).OrderBy(p => p.StartTime).ToList();

            if (gamesFromServerThatAreNotStarted.Any())
            {
                if (nextMatch == null)
                {
                    nextMatch = gamesFromServerThatAreNotStarted.FirstOrDefault();
                }
                else
                {
                    foreach (var gameFromServer in gamesFromServerThatAreNotStarted)
                    {
                        if (gameFromServer.MatchId != nextMatch.MatchId)
                        {
                            nextMatch = gameFromServer;
                            break;
                        }
                    }
                }
            }
        }
        isLoading = false;
        await InvokeAsync(StateHasChanged);
    }

    async void OnLiveMatchViewModelRecieved(object sender, LiveMatchViewModel liveMatchViewModel)
    {
        if (liveMatchViewModel?.MatchId == nextMatch?.MatchId)
        {
            await InvokeAsync(() =>
            {
                isLoading = true;
                StateHasChanged();
            });
            await GetNextGame();
        }
    }

    async void OnTimerElapsed(object state)
    {
        if (nextMatch != null && !isLoading)
        {

            var timeLeftSpan = nextMatch.StartTime.Subtract(DateTime.UtcNow.AddDays(-2));
            timeLeft = $"{24 + timeLeftSpan.Hours} hrs: {60 + timeLeftSpan.Minutes} min: {60 + timeLeftSpan.Seconds} sec";
            await InvokeAsync(StateHasChanged);
        }
    }

    public void Dispose()
    {
        if (signalRService != null)
        {
            signalRService.OnLiveMatchView -= OnLiveMatchViewModelRecieved;
        }

        if (timer != null)
        {
            timer.Dispose();
        }
    }

}
