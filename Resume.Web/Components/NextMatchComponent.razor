@using Resume.Grpc
@using Resume.Application.ViewModels
@using Resume.Domain
@using Resume.Web.Components.LiveMatchViewModelDisplay

@implements IDisposable

@if (isLoading)
{
    <div class="text-center">
        <LoaderComponent />
    </div>
}
else
{
    if (nextMatch == null)
    {
        <p class="small text-white">No Next Match Scheduled</p>
    }
    else
    {
        <LiveMatchViewModelDisplayComponent Options="new LiveMatchViewModelDisplay.LiveMatchViewModelDisplayComponentOptions(nextMatch)" />
    }
}



@code {
    LiveMatchViewModel nextMatch;
    bool isLoading = true;

    SignalRService signalRService;
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        signalRService = await SignalRService.GetSignalRService();
        signalRService.OnLiveMatchView -= OnLiveMatchViewModelRecieved;
        signalRService.OnLiveMatchView += OnLiveMatchViewModelRecieved;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if (firstRender)
        {
            _ = GetNextGame();
        }
    }

    async Task GetNextGame()
    {
        isLoading = true;
        var gamesFromServer = await GrpcClientServices.GetGames(Variables.ArsenalTeamId) ?? new List<LiveMatchViewModel>();
        isLoading = false;
        if (gamesFromServer.Any())
        {
            var gamesFromServerThatAreNotStarted = gamesFromServer.Where(pg => pg.MatchStatus == MatchStatus.NotStarted.ToString()).OrderBy(p => p.StartTime).ToList();

            if (gamesFromServerThatAreNotStarted.Any())
            {
                if (nextMatch == null)
                {
                    nextMatch = gamesFromServerThatAreNotStarted.FirstOrDefault();
                }
                else
                {
                    foreach (var gameFromServer in gamesFromServerThatAreNotStarted)
                    {
                        if (gameFromServer.MatchId != nextMatch.MatchId)
                        {
                            nextMatch = gameFromServer;
                            break;
                        }
                    }
                }

                await InvokeAsync(StateHasChanged);
            }
        }
    }

    async void OnLiveMatchViewModelRecieved(object sender, LiveMatchViewModel liveMatchViewModel)
    {
        if (liveMatchViewModel?.MatchId == nextMatch?.MatchId)
        {
            await InvokeAsync(() =>
            {
                isLoading = true;
                StateHasChanged();
            });
            await GetNextGame();
        }
    }

    public void Dispose()
    {
        if (signalRService != null)
        {
            signalRService.OnLiveMatchView -= OnLiveMatchViewModelRecieved;
        }
    }

}
