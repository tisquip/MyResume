@using Resume.Application.ViewModels
@implements IDisposable

@if (liveMatchViewModel == null)
{
    <p class="small text-white"><em>No Match To Broadcast</em></p>
}
else
{
    <div class="text-center">
        <p class="small text-center m-0">
            Status: @liveMatchViewModel.MatchStatus
            | Minutes Played: @liveMatchViewModel.Minute
        </p>
        <p class="small text-center">
            @homeTeamName
            <img class="kt-teamlogo" src="@homeTeamLogo" />
            @liveMatchViewModel.GoalsHomeTeam
            -
            @liveMatchViewModel.GoalsAwayTeam
            <img class="kt-teamlogo" src="@awayTeamLogo" />@awayTeamName
        </p>
    </div>
}


@code {
    string matchId;
    string homeTeamLogo;
    string homeTeamName;
    string awayTeamLogo;
    string awayTeamName;

    LiveMatchViewModel liveMatchViewModel;

    SignalRService signalRService;
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        signalRService = await SignalRService.GetSignalRService();
        signalRService.OnLiveMatchView -= OnLiveMatchViewModelRecieved;
        signalRService.OnLiveMatchView += OnLiveMatchViewModelRecieved;
    }

    async void OnLiveMatchViewModelRecieved(object sender, LiveMatchViewModel liveMatchViewModelArg)
    {
        if (liveMatchViewModelArg != null)
        {
            liveMatchViewModel = liveMatchViewModelArg;
            if (liveMatchViewModel.MatchId != matchId)
            {
                homeTeamLogo = liveMatchViewModel.HomeTeamLogo;
                homeTeamName = liveMatchViewModel.HomeTeamName;
                awayTeamLogo = liveMatchViewModel.AwayTeamLogo;
                awayTeamName = liveMatchViewModel.AwayTeamName;
            }

            await InvokeAsync(StateHasChanged);
        }
    }

    public void Dispose()
    {
        if (signalRService != null)
        {
            signalRService.OnLiveMatchView -= OnLiveMatchViewModelRecieved;
        }
    }

}

